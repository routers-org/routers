syntax = "proto3";
package api.match.v1;

import "model/v1/costing.proto";
import "model/v1/geo.proto";
import "model/v1/route.proto";

message MatchRequest {
  // A list of coordinates to match
  repeated model.v1.Coordinate data = 1;

  // The distance (in m) used to search for the closest edges, using a square scan.
  // The default value is 50 meters.
  optional double search_distance = 2;

  // The maximum distance (in m) between coordinates before a new route is started.
  optional double breakage_distance = 3;

  // Configurable options to dictate the costing functions
  model.v1.CostOptions options = 4;
}

message MatchResponse {
  repeated model.v1.MatchedRoute matches = 1;
}

message SnapRequest {
  // A list of coordinates to match
  repeated model.v1.Coordinate data = 1;

  // The distance (in m) used to search for the closest edges, using a square scan.
  // The default value is 50 meters.
  optional double search_distance = 2;

  // The maximum distance (in m) between coordinates before a new route is started.
  optional double breakage_distance = 3;

  // Configurable options to dictate the costing functions
  model.v1.CostOptions options = 4;
}

message SnapResponse {
  repeated model.v1.MatchedRoute matches = 1;
}

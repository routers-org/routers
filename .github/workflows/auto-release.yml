name: Auto Release Monorepo

on:
  pull_request:
    types: [closed]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Job 1: Detect changed crates and create release PRs
  detect-and-release:
    if: |
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'main' &&
      !startsWith(github.event.pull_request.head.ref, 'release/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      matrix: ${{ steps.detect-changes.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: false
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Detect changed crates
        id: detect-changes
        run: |
          # Get the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Find all crates in the workspace
          CRATES=$(find . -name "Cargo.toml" -not -path "./target/*" | sort)
          
          # Array to store crates that need releases
          CHANGED_CRATES=()
          
          for crate_toml in $CRATES; do
            CRATE_DIR=$(dirname "$crate_toml")
            CRATE_NAME=$(
              cargo metadata --format-version 1 --no-deps | jq -r \
                 --arg path "$(realpath $crate_toml)" \
                 '.packages[] | select(.manifest_path | startswith($path)) | .name'
            )
          
            # Check if there are changes in this crate since last tag
            if [ -z "$LAST_TAG" ] || git diff --name-only "$LAST_TAG"..HEAD | grep -q "^${CRATE_DIR#./}"; then
              echo "Changes detected in crate: $CRATE_NAME at $CRATE_DIR"
          
              # Get next version for this crate
              cd "$CRATE_DIR"
              CLIFF_VERSION=$(git-cliff --bumped-version 2>/dev/null)
              SUGGESTED_NEXT_VERSION="${CLIFF_VERSION##*-v}"
              NEXT_VERSION="${SUGGESTED_NEXT_VERSION:-0.1.0}"
          
              cd - > /dev/null
              CHANGED_CRATES+=("{\"name\":\"$CRATE_NAME\",\"path\":\"$CRATE_DIR\",\"version\":\"$NEXT_VERSION\"}")
            fi
          done
          
          # Create JSON matrix for parallel processing
          if [ ${#CHANGED_CRATES[@]} -gt 0 ]; then
            # Debug: log the raw crate objects
            echo "DEBUG: Raw crate objects:"
            printf '%s\n' "${CHANGED_CRATES[@]}"
          
            # Create the matrix JSON by combining all crate objects into an array
            printf '%s\n' "${CHANGED_CRATES[@]}" | jq -s . > /tmp/crates.json
          
            MATRIX_JSON=$(jq -c '{"include": .}' /tmp/crates.json)
            echo "$MATRIX_JSON"
          
            echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
            echo "Found ${#CHANGED_CRATES[@]} crates with changes"
          else
            echo 'matrix={"include":[]}' >> $GITHUB_OUTPUT
            echo "No crates with changes found"
          fi

  # Job 2: Create release PRs for each changed crate
  create-release-prs:
    needs: detect-and-release
    if: needs.detect-and-release.outputs.matrix != '{"include":[]}'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    strategy:
      matrix: ${{ fromJson(needs.detect-and-release.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: false
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Generate changelog and update version
        working-directory: ${{ matrix.path }}
        run: |
          # Generate changelog
          git-cliff --unreleased --bump --tag "${{ matrix.name }}-v${{ matrix.version }}" --prepend CHANGELOG.md
          git-cliff --unreleased --strip all > UNRELEASED.md
          
          # Update Cargo.toml version
          sed -i 's/^version = ".*"/version = "${{ matrix.version }}"/' Cargo.toml

      - name: Cargo check for this crate
        working-directory: ${{ matrix.path }}
        run: cargo check

      - name: Dry run crates.io publish
        working-directory: ${{ matrix.path }}
        run: cargo publish --dry-run --allow-dirty
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Create release branch and commit
        run: |
          # Set branch name
          BRANCH_NAME="release/${{ matrix.name }}-v${{ matrix.version }}"
          
          # Configure Bot User
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add modifications
          git add "${{ matrix.path }}/Cargo.toml" "${{ matrix.path }}/CHANGELOG.md"
          git commit -m "chore(${{ matrix.name }}): release v${{ matrix.version }}"
          echo "Added modifications to toml and changelog"

      - name: Generate Changelog Message
        id: changelog_message
        run: |
          # Generate Changelog Output
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat ${{ matrix.path }}/UNRELEASED.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Remove UNRELEASED file after we've generated the changelog
          rm ${{ matrix.path }}/UNRELEASED.md

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          author: 'GitHub <noreply@github.com>'
          commit-message: 'chore(release): prepare for v${{ matrix.version }} of ${{ matrix.name }}'
          base: ${{ github.event.repository.default_branch || 'main' }}
          delete-branch: 'false' # Don't delete version branches
          branch: release/${{ matrix.name }}-v${{ matrix.version }}
          title: "Release `v${{ matrix.version }}` of `${{ matrix.name }}`"
          body: |
            ## Release Broker
            This PR brokers the release for `v${{ matrix.version }}` of `${{ matrix.name }}`.
            
            ${{ steps.changelog_message.outputs.content }}
            
            ---
            This PR contains:
            - ✅ Updated version in `${{ matrix.path }}/Cargo.toml`
            - ✅ Generated changelog with git-cliff
            - ✅ Dry-run crates.io publish passed
            
            **Merging this PR will:**
            1. Create a git tag `${{ matrix.name }}-v${{ matrix.version }}`
            2. Publish `${{ matrix.name }}` to crates.io
            3. Create a GitHub release
          labels: |
            release
            automated
            ${{ matrix.name }}

  # Job 3: Finalize releases when release PRs are merged
  finalize-release:
    if: |
      github.event_name == 'pull_request' && 
      github.event.action == 'closed' && 
      github.event.pull_request.merged == true &&
      startsWith(github.event.pull_request.head.ref, 'release/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: false
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Extract crate info from branch name
        id: extract_info
        run: |
          # Extract crate name and version from branch name like "release/my-crate-v1.2.3"
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          CRATE_INFO="${BRANCH_NAME#release/}"
          
          # Split on the last occurrence of "-v"
          CRATE_NAME="${CRATE_INFO%-v*}"
          VERSION="${CRATE_INFO##*-v}"
          
          echo "crate_name=$CRATE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=${CRATE_NAME}-v${VERSION}" >> $GITHUB_OUTPUT

      - name: Find crate directory
        id: find_crate
        run: |
          # Find the directory containing this crate
          CRATE_DIR=$(find . -name "Cargo.toml" -not -path "./target/*" -exec grep -l "name = \"${{ steps.extract_info.outputs.crate_name }}\"" {} \; | head -1 | xargs dirname)
          echo "crate_dir=$CRATE_DIR" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.extract_info.outputs.tag_name }}" -m "Release ${{ steps.extract_info.outputs.crate_name }} v${{ steps.extract_info.outputs.version }}"
          git push origin "${{ steps.extract_info.outputs.tag_name }}"

      - name: Publish to crates.io
        if: false
        working-directory: ${{ steps.find_crate.outputs.crate_dir }}
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.extract_info.outputs.tag_name }}
          name: Release ${{ steps.extract_info.outputs.crate_name }} v${{ steps.extract_info.outputs.version }}
          body_path: ${{ steps.find_crate.outputs.crate_dir }}/CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup release branch
        run: |
          git push origin --delete ${{ github.event.pull_request.head.ref }}
        continue-on-error: true